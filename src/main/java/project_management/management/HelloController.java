package project_management.management;

import Data.DataController;
import Data.GeneralExpenses;
import Data.Payment;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;

import javafx.stage.Stage;
import javafx.scene.Node;
import Data.Project;

import java.io.IOException;
import java.time.LocalDate;


/**
 * Dashboard . Was autogenerated and I didnâ€™t change the name.
 */

public class HelloController {

    private Scene scene; // for the change windows
    private Stage stage; // for the change windows
    private Parent parent; // for the change windows

    @FXML
    private Label user;
    @FXML
    private TabPane projectTabPane; // refers to the tabPane on the window

    private int tabCounter = 0; // how many tabs are

    @FXML
    private TextField projectName; // refers to the project name field in the window

    /**
     * Action when clicking New.
     * Here we load the template of ProjectTabController where we can
     * put all the information required to appear in the frontpage.
     */
    @FXML
    protected void onNewButtonClick() throws IOException {
        if (projectName.getText().isEmpty()) return;
        Project p = new Project(projectName.getText());
        DataController.getInstance().getProjetcs().add(p);
        tabCounter++;
        FXMLLoader loader = new FXMLLoader(getClass().getResource("ProjectTab-view.fxml"));
        AnchorPane tabContent = loader.load();
        ProjectTabController tabController = loader.getController();

        tabController.setTabContent(tabCounter, p);
        Tab newTab = new Tab(projectName.getText(), tabContent);
        projectTabPane.getTabs().add(newTab);
        projectName.setText("");
        System.out.println("New project added: " + p.getName());
    }

    /**
     * Delete the current project and corresponding tab.
     */
    @FXML
    protected void onDeleteButtonClick() {
        if (projectTabPane.getTabs().isEmpty()) return;
        int index = projectTabPane.getSelectionModel().getSelectedIndex();
        DataController.getInstance().getProjetcs().remove(index);
        projectTabPane.getTabs().remove(index);
        System.out.println("Project deleted at index: " + index);
    }

    /**
     * Open a new window with the information of the project.
     */
    @FXML
    protected void onOpenButtonClick(ActionEvent e) throws IOException {
        if (projectTabPane.getSelectionModel().getSelectedIndex() < 0) {
            System.out.println("No project selected");
            return;
        }
        FXMLLoader loader = new FXMLLoader(getClass().getResource("Project-view.fxml"));
        parent = loader.load();
        ProjectController controller = loader.getController();
        controller.loadWindow(DataController.getInstance().getProjetcs().get(projectTabPane.getSelectionModel().getSelectedIndex()));
        stage = (Stage) ((Node)e.getSource()).getScene().getWindow();
        scene = new Scene(parent);
        stage.setScene(scene);
        stage.show();

    }

    @FXML
    public void onlogoutButtonCliked(ActionEvent e) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("Login-view.fxml"));
        parent = loader.load();
        stage = (Stage) ((Node) e.getSource()).getScene().getWindow();
        scene = new Scene(parent);
        stage.setScene(scene);
        stage.show();
        System.out.println("Logged out.");
    }

    @FXML
    public void onGeneralExpensesButtonClicked(ActionEvent e) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("GeneralExpenses-view.fxml"));
        parent = loader.load();
        GeneralExpensesController controller = loader.getController();
        controller.loadWindow();
        stage = (Stage) ((Node)e.getSource()).getScene().getWindow();
        scene = new Scene(parent);
        stage.setScene(scene);
        stage.show();
    }

    @FXML
    public void onNearPaydmentsButtonClicked(){
        TableView<GeneralExpenses> table = new TableView<>();
        TableColumn<GeneralExpenses,String> name = new TableColumn<>("Name");
        TableColumn<GeneralExpenses,String> amount = new TableColumn<>("Amount");
        TableColumn<GeneralExpenses, String> date = new TableColumn<>("Date");
        TableColumn<GeneralExpenses, String> currency = new TableColumn<>("Currency");
        table.getColumns().addAll(name,date,amount,currency);

        name.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().getName()));
        amount.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().getAmountS()));
        currency.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().getCurrency()));
        date.setCellValueFactory(data ->{
            LocalDate localDate = data.getValue().getDate();
            return new javafx.beans.property.SimpleStringProperty(localDate.toString());
        });
        for(GeneralExpenses ge : DataController.getInstance().getGeneralExpenses()){
            if(ge.getType().equals("Expense")) if(ge.getDate().isBefore(LocalDate.now().plusMonths(1))) {
                if(ge.getDate().isAfter(LocalDate.now())) table.getItems().add(ge);
            }
        }
        for(Project p :DataController.getInstance().getProjetcs()){
            for(Payment pa : p.getPayments())
                if(pa.getDate().isBefore(LocalDate.now().plusMonths(1))){
                    if(pa.getDate().isAfter(LocalDate.now())){
                        table.getItems().add(new GeneralExpenses(pa.getName(),"",pa.getAmount(),pa.getCurrency(),pa.getDate()));
                    }
                }
        }

        Stage stage=new Stage();
        Scene scene = new Scene(table, 400, 300);
        stage.setScene(scene);
        stage.setTitle("Income and Expenses Bar Chart");
        stage.show();
    }
    @FXML
    public void onGenerateTableButtonClicked(){
        // Create the X-axis (Categories: Months)
        CategoryAxis xAxis = new CategoryAxis();
        xAxis.setLabel("Month");

        // Create the Y-axis (Values: Amounts)
        NumberAxis yAxis = new NumberAxis();
        yAxis.setLabel("Amount");

        // Create the BarChart
        BarChart<String, Number> barChart = new BarChart<>(xAxis, yAxis);
        barChart.setTitle("Monthly Income and Expenses");

        XYChart.Series<String, Number> incomeSeries = new XYChart.Series<>();
        incomeSeries.setName("Income");
        for(GeneralExpenses ge : DataController.getInstance().getGeneralExpenses()){
            if(ge.getType().equals("Income")) {
                incomeSeries.getData().add(new XYChart.Data<>(ge.getDate().getMonth().toString(), DataController.getInstance().changeCurrency(ge.getAmount(), ge.getCurrency(), "EUR")));
            }
        }

        XYChart.Series<String, Number> expenseSeries = new XYChart.Series<>();
        expenseSeries.setName("Expense");
        for(GeneralExpenses ge : DataController.getInstance().getGeneralExpenses()){
            if(ge.getType().equals("Expense"))  {
                expenseSeries.getData().add(new XYChart.Data<>(ge.getDate().getMonth().toString(), DataController.getInstance().changeCurrency(ge.getAmount(), ge.getCurrency(), "EUR")));
            }
        }

        barChart.getData().addAll(incomeSeries, expenseSeries);
        Stage stage=new Stage();
        Scene scene = new Scene(barChart, 1000, 800);
        stage.setScene(scene);
        stage.setTitle("Income and Expenses Bar Chart");
        stage.show();

    }

    /**
     * Function that must be used every time we load the window.
     * Information is stored in DataController, so must be loaded into the window.
     */
    public void loadWindow() throws IOException {
        user.setText("Welcome: " + DataController.getInstance().getLogedUser().getName());
        for (Project p : DataController.getInstance().getProjetcs()) {

            tabCounter++;
            FXMLLoader loader = new FXMLLoader(getClass().getResource("ProjectTab-view.fxml"));
            AnchorPane tabContent = loader.load();
            ProjectTabController tabController = loader.getController();

            tabController.setTabContent(tabCounter, p);
            Tab newTab = new Tab(p.getName(), tabContent);
            projectTabPane.getTabs().add(newTab);
        }
        System.out.println("Loaded projects: " + DataController.getInstance().getProjetcs().size());
    }
}

